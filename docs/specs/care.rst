.. _noi.specs.care:

====================================
Lino Care, a social ticketing system
====================================

.. How to test only this document:

    $ python setup.py test -s tests.SpecsTests.test_care
    
    doctest init:

    >>> from lino import startup
    >>> startup('lino_noi.projects.care.settings.doctests')
    >>> from lino.api.doctest import *

.. contents::
  :local:



Overview
========

**Lino Care** is a variant of :ref:`noi` specialized for organizations
who help people caring for each other.  These might be old people,
orphans, immigrants, disabled, addicts, or just "normal" people
without any handicap.

While :ref:`noi` was originally used as a ticketing system for the
:ref:`Lino team <lino.team>` and other open source software teams, we
realized that we can use almost the same concepts for managing "social
tickets".  A different context, but a similar database structure.  In
:ref:`care` we just don't call them "tickets" but "pleas" (German
"Bitten").


Design choices
==============

- Users do not actually need to access the Lino site. It is possible
  that a "**connector**" does the job of entering the information into
  Lino in behalf of the actual user.

- There is no difference between **care recipients** and **care
  providers**.  Both are stored as *system users*.  Any user can "call
  for help" by "opening a plea".

- The site maintains a catalogue of faculties_. This is a
  classification of the "needed services or things" which will make
  the connection recipient and provider. For example things like
  "table" or "a pair of shoes", or services like "Baby sitting",
  "English teaching" or "Pedicure".

  Every user can enter information about their **competences** and
  their **availability**.

- The application protects privacy of all users as much as possible.
  Neither providers nor recipients are listed publicly. All users must
  be confirmed after registration. There is a manager (one person or a
  team of several users) who does this job. The manager can see all
  users and their data.

- The care recipients can create new tickets and enter information
  about what kind of care they need. They cannot see who is going to
  help them. They cannot even see whether somebody is available at all
  for a given type of care.

- The care providers can see the incoming help requests for the kind
  of thing or service they provide. They can see the contact data of
  the user who asks for help.

  When they receive a notification about a help request, they must
  give feedback, e.g. they can *refuse* it (possibly specifying a
  reason like "I am not available" or "Request does not fit to what I
  can give").  If they decide to contact that person, then they should
  register this to the database: date and time of contact, a field for
  remarks, and (important) whether they decided to "take the ticket"
  or not after speaking with the recipient.

- Depending on the nature of the "service or thing", there must
  probably be additional information.


Implementation
==============

Lino Care is technically a sub-project of Lino Noi. It does not have a
Git repository on its own.  Everything specific to Lino Care is in
:mod:`lino_noi.projects.care` and below.

The demo data for :ref:`care` is mostly being generated by
:mod:`lino_noi.projects.care.lib.tickets.fixtures.demo`.


User types
==========

These user types are defined in :mod:`lino_noi.projects.care.roles`:

>>> rt.show('users.UserTypes')
======= =========== ===============
 value   name        text
------- ----------- ---------------
 000     anonymous   Anonymous
 100     user        User
 500     connector   Connector
 900     admin       Administrator
======= =========== ===============
<BLANKLINE>

**Anonymous users** can (1) register, (2) log in, (3) see a list of
public help requests.

As a **simple user** you can

- configure your user profile (contact data, competences, preferences)
  
- create your own help requests ("Where I *need* help")
  :class:`tickets.MyTickets`
         
- answer to help requests of other users ("Where I *can* help")
  :class:`tickets.SuggestedTickets`.
  Here you can offer your help for a particular request.
  
- see your own help offer ("Where I *offered* help"). A help offer is
  when you declare that you agree to help with a given request. Your
  offer needs to be *accepted* by the requester before you actually
  get *engaged*.  :class:`votes.MyOffers`
  
- see your to-do list ("Where I *do* help"). This is a list of your
  help offers which have been accepted.  We call them *jobs*.
  :class:`votes.MyTasks`

As a **connector** you can manage these things in behalf of other
users (who chose to get represented by you instead of using the system
themselves).

Demo users
==========

As an **administrator** you can (additionally to the above) also
create new users, change the catalog of faculties, ...

The demo database has a set of **fictive users**. Let's introduce
them:

>>> rt.show('users.Users')
========== =============== ============ ===========
 Username   User type       First name   Last name
---------- --------------- ------------ -----------
 alex       User            Alex
 berta      User            Berta
 christa    User            Christa
 dora                       Dora
 eric       Connector       Eric
 robin      Administrator   Robin        Rood
 rolf       Administrator   Rolf         Rompen
 romain     Administrator   Romain       Raffault
========== =============== ============ ===========
<BLANKLINE>



Faculties
=========

Every Lino Care site has a catalog of **faculties**.

Faculties are the things that will make the connection between the
requester and the provider of help:

- A faculty is something for which users can declare to be
  **competent**.

- Every help request will require a given faculty.

The *Where can I help* list (SuggestedTickets) is based on your
competences and the required faculties of open requests, i.e. Lino
will not bother you with requests for which you aren't competent.


>>> rt.show(faculties.AllFaculties)
... #doctest: +REPORT_UDIFF
========================== ============================= ============================ ========== ================
 Designation                Designation (de)              Designation (fr)             Affinity   Parent faculty
-------------------------- ----------------------------- ---------------------------- ---------- ----------------
 Babysitting                Babysitting                   Garde enfant                 100
 Car driving                Fahrdienst                    Voiture                      100
 French lessons             Französischunterricht         Cours de francais            100        Teaching
 Garden works               Gartenarbeiten                Travaux de jardin            100        Home & Garden
 German lessons             Deutschunterricht             Cours d'allemand             100        Teaching
 Go out with dogs           Hunde spazierenführen         Chiens                       100
 Guitar lessons             Gitarrenunterricht            Cours de guitare             100        Music
 Hair cutting               Friseur                       Coiffure                     100
 Home & Garden              Haus und Garten               Maison et jardin             100
 Maths lessons              Matheunterricht               Cours de maths               100        Teaching
 Mentoring elderly people   Gesellschafter für Senioren   Rencontres personnes agées   100
 Music                      Musik                         Musique                      100
 Piano lessons              Klavierunterricht             Cours de piano               100        Music
 Renovation                 Renovierung                   Rénovation                   100        Home & Garden
 Repair works               Reparaturarbeiten             Travaux de réparation        100        Home & Garden
 Repairing clothes          Kleider reparieren            Réparer des vètements        100        Home & Garden
 Shopping                   Botengänge                    Commissions                  100
 Teaching                   Unterricht                    Cours                        100
 Translations               Übersetzungsarbeiten          Traductions                  100
 Write letters              Briefe schreiben              Écrire des lettres           100
 **Total (20 rows)**                                                                   **2000**
========================== ============================= ============================ ========== ================
<BLANKLINE>


>>> rt.show(faculties.TopLevelFaculties)
... #doctest: +REPORT_UDIFF
========================== ============================= ============================ ==== =================================================================== ================
 Designation                Designation (de)              Designation (fr)             ID   Children                                                            Parent faculty
-------------------------- ----------------------------- ---------------------------- ---- ------------------------------------------------------------------- ----------------
 Babysitting                Babysitting                   Garde enfant                 16
 Car driving                Fahrdienst                    Voiture                      13
 Go out with dogs           Hunde spazierenführen         Chiens                       18
 Hair cutting               Friseur                       Coiffure                     15
 Home & Garden              Haus und Garten               Maison et jardin             8    *Garden works*, *Renovation*, *Repair works*, *Repairing clothes*
 Mentoring elderly people   Gesellschafter für Senioren   Rencontres personnes agées   17
 Music                      Musik                         Musique                      5    *Guitar lessons*, *Piano lessons*
 Shopping                   Botengänge                    Commissions                  14
 Teaching                   Unterricht                    Cours                        1    *French lessons*, *German lessons*, *Maths lessons*
 Translations               Übersetzungsarbeiten          Traductions                  19
 Write letters              Briefe schreiben              Écrire des lettres           20
========================== ============================= ============================ ==== =================================================================== ================
<BLANKLINE>


>>> rt.show('faculties.Competences')
==== ========= ================ ==========
 ID   User      Faculty          Affinity
---- --------- ---------------- ----------
 1    Alex      Translations     100
 2    Berta     Translations     100
 3    Alex      Garden works     100
 4    Alex      Repair works     100
 5    Christa   Piano lessons    100
 6    Dora      Repair works     100
 7    Eric      Guitar lessons   100
 8    Dora      Shopping         100
                                 **800**
==== ========= ================ ==========
<BLANKLINE>


Configuring your preferences
============================

>>> show_choices('alex', '/choices/faculties/CompetencesByUser/faculty')
Babysitting
Car driving
French lessons
Garden works
German lessons
Go out with dogs
Guitar lessons
Hair cutting
Home & Garden
Maths lessons
Mentoring elderly people
Music
Piano lessons
Renovation
Repair works
Repairing clothes
Shopping
Teaching
Translations
Write letters


Topics
======

>>> dd.is_installed('topics')
False



>>> rt.show('tickets.AllTickets')
==== ========================================================================= ========= ================ ============== =========
 ID   Summary                                                                   Author    Faculty          Actions        Project
---- ------------------------------------------------------------------------- --------- ---------------- -------------- ---------
 8    Who would buy diapers for me in Aachen?                                   Alex      Shopping         **Ready**
 7    Who can review my final work?                                             Eric                       **Sleeping**
 6    Who helps my sont to prepare for a maths test on May 21? (5. grade PDS)   Berta     Maths lessons    **Started**
 5    Who would play music on my birthday party?                                Alex      Music            **Opened**
 4    Who can give guitar lessons to my daughter?                               Alex      Guitar lessons   **Opened**
 3    Who can give piano lessons to my son?                                     Eric      Piano lessons    **Talk**
 2    My lawn needs mowing. On Thursday or Saturday.                            Christa   Garden works     **New**
 1    My faucet is dripping, who can help?                                      Berta     Repair works     **Closed**
==== ========================================================================= ========= ================ ============== =========
<BLANKLINE>


Voters by ticket
================

>>> def show_votes(pk):
...     obj = tickets.Ticket.objects.get(pk=pk)
...     print(obj)
...     rt.show('votes.VotesByVotable', obj)

Alex and Dora had voted for #1, Alex has been assigned and has done
his job. Dora's vote has been cancelled.

>>> show_votes(1)
#1 (My faucet is dripping, who can help?)
======= ===============
 Voter   Actions
------- ---------------
 Alex    **Done**
 Dora    **Cancelled**
======= ===============
<BLANKLINE>


Ticket #2 has not yet any vote:

>>> show_votes(2)
#2 (My lawn needs mowing. On Thursday or Saturday.)
No data to display

>>> show_votes(3)
#3 (Who can give piano lessons to my son?)
========= ===============
 Voter     Actions
--------- ---------------
 Christa   **Candidate**
========= ===============
<BLANKLINE>

>>> show_votes(4)
#4 (Who can give guitar lessons to my daughter?)
No data to display

>>> show_votes(5)
#5 (Who would play music on my birthday party?)
========= ===============
 Voter     Actions
--------- ---------------
 Christa   **Candidate**
 Eric      **Candidate**
========= ===============
<BLANKLINE>



The main menu
=============

**Site administrators** have the following menu:

>>> rt.login('robin').show_menu()
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
- Votes : My candidatures, My tasks, My watchlist, My votes
- Office : My Excerpts, My Comments, My Notification messages
- Pleas : My Pleas, Where I can help, Active pleas, All pleas, Unassigned pleas, Active projects
- Reports :
  - System : Broken GFKs
- Configure :
  - System : Site Parameters, Help Texts, Users
  - Places : Countries, Places
  - Office : Excerpt Types
  - Pleas : Projects, Projects (tree), Project Types, Ticket types, Sites
  - Faculties : Faculties (tree), Faculties (all)
- Explorer :
  - System : content types, Authorities, User types, Changes, Notification messages
  - Votes : All votes, Vote states
  - Office : Excerpts, Comments
  - Pleas : Dependencies, Ticket states
  - Faculties : Competences
- Site : About


**Simple** users have a very limited menu:

>>> rt.login('berta').show_menu()
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
- Votes : My candidatures, My tasks, My watchlist, My votes
- Office : My Comments, My Notification messages
- Pleas : My Pleas, Where I can help
- Site : About

Lists of pleas
==============


My pleas
--------

  
>>> rt.login('christa').show(tickets.MyTickets)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
================================================================== ===============================
 Description                                                        Actions
------------------------------------------------------------------ -------------------------------
 `#2 (My lawn needs mowing. On Thursday or Saturday.) <Detail>`__   [★] **New** → [☾] [☎] [☉] [☐]
================================================================== ===============================
<BLANKLINE>



Where I can help
----------------

>>> rt.login('eric').show(tickets.SuggestedTickets)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
==================================================================================== ================ ================
 Description                                                                          Faculty          Actions
------------------------------------------------------------------------------------ ---------------- ----------------
 `#4 (Who can give guitar lessons to my daughter?) <Detail>`__ by `Alex <Detail>`__   Guitar lessons   [☆] **Opened**
==================================================================================== ================ ================
<BLANKLINE>



My offers
-------------------

>>> rt.login('christa').show(votes.MyOffers)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
==================================================================================================== ================================
 Description                                                                                          Actions
---------------------------------------------------------------------------------------------------- --------------------------------
 `#5 (Who would play music on my birthday party?) <Detail>`__ by `Alex <Detail>`__                    [★] **Candidate** → [Watching]
 `#3 (Who can give piano lessons to my son?) <Detail>`__ by `Eric <Detail>`__ for `Dora <Detail>`__   [★] **Candidate** → [Watching]
==================================================================================================== ================================
<BLANKLINE>


>>> rt.login('eric').show(votes.MyOffers)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
=================================================================================== ==================================================
 Description                                                                         Actions
----------------------------------------------------------------------------------- --------------------------------------------------
 `#5 (Who would play music on my birthday party?) <Detail>`__ by `Alex <Detail>`__   [★] **Candidate** → [Watching] [Assign] [Cancel]
=================================================================================== ==================================================
<BLANKLINE>



My Tasks
--------

>>> rt.login('alex').show(votes.MyTasks)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
No data to display

>>> rt.login('alex').show(votes.MyVotes)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
============================================================================== ================
 Description                                                                    Actions
------------------------------------------------------------------------------ ----------------
 `#8 (Who would buy diapers for me in Aachen?) <Detail>`__                      [★] **Author**
 `#5 (Who would play music on my birthday party?) <Detail>`__                   [★] **Author**
 `#4 (Who can give guitar lessons to my daughter?) <Detail>`__                  [★] **Author**
 `#1 (My faucet is dripping, who can help?) <Detail>`__ by `Berta <Detail>`__   [★] **Done**
============================================================================== ================
<BLANKLINE>




Rating a help offer
===================

>>> base = '/choices/votes/Votes/rating'
>>> show_choices("robin", base + '?query=')
<br/>
Very good
Good
Satisfying
Deficient
Insufficient
Unratable


The detail layout of a ticket
=============================

Here is a textual description of the fields and their layout used in
the detail window of a ticket.

>>> from lino.utils.diag import py2rst
>>> print(py2rst(tickets.Tickets.detail_layout, True))
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF -SKIP
(main) [visible for all]:
- **General** (general):
  - (general_1):
    - (general1):
      - (general1_1): **Summary** (summary), **ID** (id), **Deadline** (deadline)
      - (general1_2): **Author** (user), **End user** (end_user), **Faculty** (faculty)
      - (general1_3): **Site** (site), **Actions** (workflow_buttons)
    - **Votes** (votes.VotesByVotable) [visible for user connector admin]
  - (general_2): **Description** (description), **Comments** (CommentsByRFC) [visible for user connector admin]
- **History** (changes.ChangesByMaster) [visible for connector admin]
- **More** (more) [visible for connector admin]:
  - (more_1) [visible for all]:
    - (more1):
      - (more1_1): **Created** (created), **Modified** (modified), **Ticket type** (ticket_type)
      - (more1_2): **State** (state), **Priority** (priority), **Project** (project)
    - **Assignable workers** (faculties.AssignableWorkersByTicket) [visible for connector admin]
  - (more_2) [visible for all]: **Solution** (upgrade_notes), **Dependencies** (LinksByTicket) [visible for connector admin]
<BLANKLINE>



